AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  Clap! app on AWS Serverless

Globals:
  Function:
    Timeout: 30

Resources:
  S3Bucket:
    Type: AWS::S3::Bucket
    Properties:
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true

  S3BucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref S3Bucket
      PolicyDocument:
        Id: ClapS3BucketPolicy
        Version: 2012-10-17
        Statement:
          - Action:
              - 's3:GetObject'
            Effect: Allow
            Principal:
              Service: cloudfront.amazonaws.com
            Resource: !Sub "${S3Bucket.Arn}/*"
            Condition:
              StringEquals:
                AWS:SourceArn: !Sub "arn:aws:cloudfront::${AWS::AccountId}:distribution/${CloudFrontDistribution.Id}"

  LambdaFunctionRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Path: /
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole'
        - 'arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole'
      Policies:
        - PolicyName: S3BucketAccess
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:GetObjectAcl
                  - s3:GetObjectVersion
                  - s3:PutObject
                  - s3:PutObjectAcl
                  - s3:DeleteObject
                  - s3:DeleteObjectTagging
                  - s3:DeleteObjectVersionTagging
                  - s3:GetObjectTagging
                  - s3:GetObjectVersionTagging
                  - s3:PutObjectTagging
                  - s3:PutObjectVersionTagging
                Resource: !Sub "${S3Bucket.Arn}/*"
              - Effect: Allow
                Action:
                  - s3:ListBucket
                  - s3:GetBucketLocation
                  - s3:GetLifecycleConfiguration
                  - s3:PutLifecycleConfiguration
                Resource: !Sub "${S3Bucket.Arn}"

  LambdaFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./
      Handler: run.sh
      Runtime: nodejs20.x
      Architectures:
        - arm64
      Environment:
        Variables:
            AWS_LAMBDA_EXEC_WRAPPER: /opt/bootstrap
            PORT: 8080
            S3_BUCKET_NAME: !Ref S3Bucket
            S3_REGION: !Ref AWS::Region
      Layers:
        - !Sub 'arn:aws:lambda:${AWS::Region}:753240598075:layer:LambdaAdapterLayerArm64:20'
      FunctionUrlConfig:
        AuthType: NONE
      VpcConfig:
        SubnetIds:
          - subnet-37fef75e
          - subnet-5282f71f
          - subnet-30b6964b
        SecurityGroupIds:
          - sg-e36e1183
      Role: !GetAtt LambdaFunctionRole.Arn
    Metadata:
      BuildMethod: makefile

  CloudFrontOriginAccessControl:
    Type: AWS::CloudFront::OriginAccessControl
    Properties:
      OriginAccessControlConfig:
        Name: ClapOriginAccessControl
        OriginAccessControlOriginType: s3
        SigningBehavior: always
        SigningProtocol: sigv4

  CloudFrontDistribution:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Origins:
        - Id: clapS3Origin
          DomainName: !GetAtt S3Bucket.RegionalDomainName
          OriginAccessControlId: !Ref CloudFrontOriginAccessControl
          S3OriginConfig:
            OriginAccessIdentity: ""
        - Id: clapLambdaOrigin
          DomainName: !Select [2, !Split ["/", !GetAtt LambdaFunctionUrl.FunctionUrl]]
          CustomOriginConfig:
            HTTPSPort: 443
            OriginProtocolPolicy: https-only
            OriginSSLProtocols:
              - TLSv1.2
        Enabled: true
        HttpVersion: http2
        DefaultRootObject: ''
        DefaultCacheBehavior:
          TargetOriginId: clapLambdaOrigin
          CachePolicyId: 4135ea2d-6df8-44a3-9df3-4b5a84be39ad # CachingDisabled
          OriginRequestPolicyId: b689b0a8-53d0-40ab-baf2-68738e2966ac # All cookies, headers expect host (needed from function URL), and query strings
          ResponseHeadersPolicyId: 67f7725c-6f97-4210-82d7-5512b31e9d03 # SecurityHeadersPolicy
          Compress: true
          AllowedMethods:
          - DELETE
          - GET
          - HEAD
          - OPTIONS
          - PATCH
          - POST
          - PUT
          ViewerProtocolPolicy: redirect-to-https
        CacheBehaviors:
        - PathPattern: '/_next/static/*'
          TargetOriginId: clapS3Origin
          CachePolicyId: 658327ea-f89d-4fab-a63d-7e88639e58f6 # CachingOptimized
          OriginRequestPolicyId: 88a5eaf4-2fd4-4709-b370-b4c650ea3fcf # CORS-S3Origin
          ResponseHeadersPolicyId: 67f7725c-6f97-4210-82d7-5512b31e9d03 # SecurityHeadersPolicy
          AllowedMethods:
          - GET
          - HEAD
          Compress: true
          ViewerProtocolPolicy: https-only
        - PathPattern: '/static/*'
          TargetOriginId: clapS3Origin
          CachePolicyId: 658327ea-f89d-4fab-a63d-7e88639e58f6 # CachingOptimized
          OriginRequestPolicyId: 88a5eaf4-2fd4-4709-b370-b4c650ea3fcf # CORS-S3Origin
          ResponseHeadersPolicyId: 67f7725c-6f97-4210-82d7-5512b31e9d03 # SecurityHeadersPolicy
          AllowedMethods:
          - GET
          - HEAD
          Compress: true
          ViewerProtocolPolicy: https-only
        - PathPattern: 'favicon*'
          TargetOriginId: clapS3Origin
          CachePolicyId: 658327ea-f89d-4fab-a63d-7e88639e58f6 # CachingOptimized
          OriginRequestPolicyId: 88a5eaf4-2fd4-4709-b370-b4c650ea3fcf # CORS-S3Origin
          ResponseHeadersPolicyId: 67f7725c-6f97-4210-82d7-5512b31e9d03 # SecurityHeadersPolicy
          AllowedMethods:
          - GET
          - HEAD
          Compress: true
          ViewerProtocolPolicy: https-only
        ViewerCertificate:
          CloudFrontDefaultCertificate: true

Outputs:
  Endpoint:
    Description: "Endpoint URL for serverless NextJS app"
    Value: !GetAtt CloudFrontDistribution.DomainName
  S3BucketName:
    Description: "S3 Bucket Name"
    Value: !Ref S3Bucket
